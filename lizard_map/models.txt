Lizard-map models
=================

All map-related work uses workspaces and workspace items.

    >>> from lizard_map.models import Workspace
    >>> from lizard_map.models import WorkspaceItem


A workspace can contain workspace items:

    >>> workspace1 = Workspace()
    >>> workspace1.save()
    >>> workspace1
    <Workspace: ...>
    >>> workspace1.workspace_items.all()
    []
    >>> workspace_item1 = workspace1.workspace_items.create()
    >>> workspace_item2 = workspace1.workspace_items.create()
    >>> workspace1.workspace_items.all()
    [<WorkspaceItem: ws=1 >, <WorkspaceItem: ws=1 >]

A workspace item can point to a method that returns a layer:

    >>> workspace_item1.has_layer()
    False
    >>> workspace_item1.layer_method = 'todo'
    >>> workspace_item1.has_layer()
    True

That string that identifies a method is looked up as a so-called entry point:

    >>> import pkg_resources
    >>> list(pkg_resources.iter_entry_points(group='lizard_map.layer_method'))
    [EntryPoint.parse(...)]
    >>> workspace_item1._layer_method_instance
    Traceback (most recent call last):
    ...
    LayerMethodNotFoundError: Entry point for 'todo' not found
    >>> workspace_item1.layer_method = 'shapefile_layer'
    >>> workspace_item1._layer_method_instance
    <function shapefile_layer at ...>

The layer method probably needs arguments. You can store them as a json string:

    >>> workspace_item1.layer_method_json
    ''
    >>> workspace_item1.layer_method_arguments
    {}
    >>> workspace_item1.layer_method_json = '{"bla": "yes"}'
    >>> workspace_item1.layer_method_arguments
    {'bla': 'yes'}

The method (looked up as a setuptools entry point) is called with the
parameters (from json):

    >>> workspace_item1.layers()
    Traceback (most recent call last):
    ...
    TypeError: shapefile_layer() takes no arguments (1 given)
    >>> workspace_item1.layer_method_json =  ''
    >>> workspace_item1.layers()
    ([<mapnik._mapnik.Layer object at ...>], {...})

A workspace item always has a name:

    >>> workspace_item1.name()
    u''
